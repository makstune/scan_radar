%% Main
v = physconst('LightSpeed');
fc = 5e09;                     % Operating frequency (Hz)
fmin = 1e09;                   
fmax = 10e09;
lambda = v/fc;

%% The existing radar design meets the following specifications.
pd = 0.9;                      % Probability of detection
pfa = 1e-6;                    % Probability of false alarm
max_distance_range = 150;      % Maximum unambiguous range
range_scale = 0.5; 
tgt_rcs = 1;                   % Required target radar cross section
int_pulsenum = 10;             % Number of pulses to integrate

%% Parameters of rectangular scan pulses
prf = v/max_distance_range;
fs = prf*max_distance_range/range_scale;
pulse_width_in_samples = 5;
pulse_width = pulse_width_in_samples/fs;
num_pulses = 1;

%% Scan region
initialAz = 45; 
endAz = -45;
scanstep = -1;

%% Create phased objects
hant = phased.IsotropicAntennaElement(...
               'FrequencyRange', [fmin fmax], ...
                  'BackBaffled', true);

hantplatform = phased.Platform(...
              'InitialPosition', [0;0;0], ...            
                     'Velocity', [0;0;0], ...
              'OrientationAxes', [1 0 0;0 1 0;0 0 1], ...
    'OrientationAxesOutputPort', false  ); 

hcollector = phased.Collector(...
                        'Sensor', hant, ...
              'PropagationSpeed', v, ...                     
            'OperatingFrequency', fc, ...                         
                     'Wavefront', 'Plane', ...                             
            'EnablePolarization', false, ...                               
              'WeightsInputPort', false);

hradiator = phased.Radiator(...
                        'Sensor', hant, ...
              'PropagationSpeed', v, ...                     
            'OperatingFrequency', fc, ... 
        'CombineRadiatedSignals', true, ...
            'EnablePolarization', false, ...                               
              'WeightsInputPort', false);

hrx = phased.ReceiverPreamp(...
                          'Gain', 20, ...
                    'LossFactor', 0, ...                     
                   'NoiseMethod', 'Noise temperature', ... 
                   'NoiseFigure', 0, ...
          'ReferenceTemperature', 290, ...                             
                    'SampleRate', fs, ...
               'NoiseComplexity', 'Complex', ...
               'EnableInputPort', true, ...
           'PhaseNoiseInputPort', false, ...
                    'SeedSource', 'Auto');
                
htx = phased.Transmitter(...
                     'PeakPower', 5226.47916420037, ...
                          'Gain', 20 , ...
                    'LossFactor', 0, ...
               'InUseOutputPort', true, ...
            'CoherentOnTransmit', true);
        
hwav = phased.RectangularWaveform(...
                    'SampleRate', fs,...
                    'PulseWidth', pulse_width,... 
                           'PRF', prf,...
                  'OutputFormat', 'Pulses',...
                     'NumPulses', num_pulses);
                 
